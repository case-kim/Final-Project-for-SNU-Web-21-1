Index: my-app/src/services/authentication.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import firebase, { analytics, auth, firestore, storage } from \"../firebase\";\r\n\r\nimport moment from \"moment\";\r\n\r\nconst authentication = {};\r\n\r\nauthentication.signUp = (fields) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!fields) {\r\n      reject(new Error(\"No fields\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const firstName = fields.firstName;\r\n    const lastName = fields.lastName;\r\n    const username = fields.username;\r\n    const emailAddress = fields.emailAddress;\r\n    const password = fields.password;\r\n\r\n    if (!firstName || !lastName || !username || !emailAddress || !password) {\r\n      reject(\r\n        new Error(\r\n          \"No first name, last name, username, e-mail address, or password\"\r\n        )\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    if (auth.currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    auth\r\n      .createUserWithEmailAndPassword(emailAddress, password)\r\n      .then((value) => {\r\n        const user = value.user;\r\n\r\n        if (!user) {\r\n          reject(new Error(\"No user\"));\r\n\r\n          return;\r\n        }\r\n\r\n        const uid = user.uid;\r\n\r\n        if (!uid) {\r\n          reject(new Error(\"No UID\"));\r\n\r\n          return;\r\n        }\r\n\r\n        const userDocumentReference = firestore.collection(\"users\").doc(uid);\r\n\r\n        userDocumentReference\r\n          .set({\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            username: username,\r\n          })\r\n          .then((value) => {\r\n            analytics.logEvent(\"sign_up\", {\r\n              method: \"password\",\r\n            });\r\n\r\n            resolve(value);\r\n          })\r\n          .catch((reason) => {\r\n            reject(reason);\r\n          });\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.signUpWithEmailAddressAndPassword = (emailAddress, password) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!emailAddress || !password) {\r\n      reject(new Error(\"No e-mail address or password\"));\r\n\r\n      return;\r\n    }\r\n\r\n    if (auth.currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    auth\r\n      .createUserWithEmailAndPassword(emailAddress, password)\r\n      .then((value) => {\r\n        const user = value.user;\r\n\r\n        if (!user) {\r\n          reject(new Error(\"No user\"));\r\n\r\n          return;\r\n        }\r\n\r\n        const uid = user.uid;\r\n\r\n        if (!uid) {\r\n          reject(new Error(\"No UID\"));\r\n\r\n          return;\r\n        }\r\n\r\n        const userDocumentReference = firestore.collection(\"users\").doc(uid);\r\n\r\n        userDocumentReference\r\n          .set({}, { merge: true })\r\n          .then((value) => {\r\n            analytics.logEvent(\"sign_up\", {\r\n              method: \"password\",\r\n            });\r\n\r\n            resolve(value);\r\n          })\r\n          .catch((reason) => {\r\n            reject(reason);\r\n          });\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.signIn = (emailAddress, password) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!emailAddress || !password) {\r\n      reject(new Error(\"No e-mail address or password\"));\r\n\r\n      return;\r\n    }\r\n\r\n    if (auth.currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    auth\r\n      .signInWithEmailAndPassword(emailAddress, password)\r\n      .then((value) => {\r\n        const user = value.user;\r\n\r\n        if (!user) {\r\n          reject(new Error(\"No user\"));\r\n\r\n          return;\r\n        }\r\n\r\n        const uid = user.uid;\r\n\r\n        if (!uid) {\r\n          reject(new Error(\"No UID\"));\r\n\r\n          return;\r\n        }\r\n\r\n        const userDocumentReference = firestore.collection(\"users\").doc(uid);\r\n\r\n        userDocumentReference\r\n          .get({ source: \"server\" })\r\n          .then((value) => {\r\n            if (value.exists) {\r\n              analytics.logEvent(\"login\", {\r\n                method: \"password\",\r\n              });\r\n\r\n              resolve(user);\r\n            } else {\r\n              userDocumentReference\r\n                .set({}, { merge: true })\r\n                .then((value) => {\r\n                  analytics.logEvent(\"login\", {\r\n                    method: \"password\",\r\n                  });\r\n\r\n                  resolve(user);\r\n                })\r\n                .catch((reason) => {\r\n                  reject(reason);\r\n                });\r\n            }\r\n          })\r\n          .catch((reason) => {\r\n            reject(reason);\r\n          });\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.sendSignInLinkToEmail = (emailAddress) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!emailAddress) {\r\n      reject(new Error(\"No e-mail address\"));\r\n\r\n      return;\r\n    }\r\n\r\n    if (auth.currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const actionCodeSettings = {\r\n      url: process.env.REACT_APP_HOMEPAGE,\r\n      handleCodeInApp: true,\r\n    };\r\n\r\n    auth\r\n      .sendSignInLinkToEmail(emailAddress, actionCodeSettings)\r\n      .then((value) => {\r\n        analytics.logEvent(\"send_sign_in_link_to_email\");\r\n\r\n        localStorage.setItem(\"emailAddress\", emailAddress);\r\n\r\n        resolve(value);\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.signInWithEmailLink = (emailAddress, emailLink) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!emailAddress || !emailLink) {\r\n      reject(new Error(\"No e-mail address or e-mail link\"));\r\n\r\n      return;\r\n    }\r\n\r\n    if (auth.currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    auth\r\n      .signInWithEmailLink(emailAddress, emailLink)\r\n      .then((value) => {\r\n        analytics.logEvent(\"login\", {\r\n          method: \"email-link\",\r\n        });\r\n\r\n        localStorage.removeItem(\"emailAddress\");\r\n\r\n        resolve(value);\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.signInWithAuthProvider = (provider) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!provider) {\r\n      reject(new Error(\"No provider\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const authProvider = new firebase.auth.OAuthProvider(provider.id);\r\n    const scopes = provider.scopes;\r\n\r\n    if (scopes) {\r\n      scopes.forEach((scope) => {\r\n        authProvider.addScope(scope);\r\n      });\r\n    }\r\n\r\n    if (auth.currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    auth\r\n      .signInWithPopup(authProvider)\r\n      .then((value) => {\r\n        const user = value.user;\r\n\r\n        if (!user) {\r\n          reject(new Error(\"No user\"));\r\n\r\n          return;\r\n        }\r\n\r\n        const uid = user.uid;\r\n\r\n        if (!uid) {\r\n          reject(new Error(\"No UID\"));\r\n\r\n          return;\r\n        }\r\n\r\n        const userDocumentReference = firestore.collection(\"users\").doc(uid);\r\n\r\n        userDocumentReference\r\n          .get({ source: \"server\" })\r\n          .then((value) => {\r\n            if (value.exists) {\r\n              analytics.logEvent(\"login\", {\r\n                method: provider.id,\r\n              });\r\n\r\n              resolve(user);\r\n            } else {\r\n              userDocumentReference\r\n                .set({}, { merge: true })\r\n                .then((value) => {\r\n                  analytics.logEvent(\"login\", {\r\n                    method: provider.id,\r\n                  });\r\n\r\n                  resolve(user);\r\n                })\r\n                .catch((reason) => {\r\n                  reject(reason);\r\n                });\r\n            }\r\n          })\r\n          .catch((reason) => {\r\n            reject(reason);\r\n          });\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.linkAuthProvider = (provider) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!provider) {\r\n      reject(new Error(\"No provider\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const authProvider = new firebase.auth.OAuthProvider(provider.id);\r\n    const scopes = provider.scopes;\r\n\r\n    if (scopes) {\r\n      scopes.forEach((scope) => {\r\n        authProvider.addScope(scope);\r\n      });\r\n    }\r\n\r\n    const currentUser = auth.currentUser;\r\n\r\n    if (!currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    currentUser\r\n      .linkWithPopup(authProvider)\r\n      .then((value) => {\r\n        analytics.logEvent(\"link_auth_provider\", {\r\n          providerId: authProvider.id,\r\n        });\r\n\r\n        resolve(value);\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.unlinkAuthProvider = (providerId) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!providerId) {\r\n      reject(new Error(\"No provider ID\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const currentUser = auth.currentUser;\r\n\r\n    if (!currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    currentUser\r\n      .unlink(providerId)\r\n      .then((value) => {\r\n        analytics.logEvent(\"unlink_auth_provider\", {\r\n          providerId: providerId,\r\n        });\r\n\r\n        resolve(value);\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.authProviderData = (providerId) => {\r\n  if (!providerId) {\r\n    return;\r\n  }\r\n\r\n  const currentUser = auth.currentUser;\r\n\r\n  if (!currentUser) {\r\n    return;\r\n  }\r\n\r\n  const providerData = currentUser.providerData;\r\n\r\n  if (!providerData) {\r\n    return;\r\n  }\r\n\r\n  return providerData.find((authProvider) => authProvider.providerId === providerId);\r\n};\r\n\r\nauthentication.signOut = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const currentUser = auth.currentUser;\r\n\r\n    if (!currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    auth\r\n      .signOut()\r\n      .then((value) => {\r\n        analytics.logEvent(\"sign_out\");\r\n\r\n        resolve(value);\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.resetPassword = (emailAddress) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!emailAddress) {\r\n      reject(new Error(\"No e-mail address\"));\r\n\r\n      return;\r\n    }\r\n\r\n    if (auth.currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    auth\r\n      .sendPasswordResetEmail(emailAddress)\r\n      .then((value) => {\r\n        analytics.logEvent(\"reset_password\");\r\n\r\n        resolve(value);\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.changeAvatar = (avatar) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!avatar) {\r\n      reject(new Error(\"No avatar\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const avatarFileTypes = [\r\n      \"image/gif\",\r\n      \"image/jpeg\",\r\n      \"image/png\",\r\n      \"image/webp\",\r\n      \"image/svg+xml\",\r\n    ];\r\n\r\n    if (!avatarFileTypes.includes(avatar.type)) {\r\n      reject(new Error(\"Invalid file type\"));\r\n\r\n      return;\r\n    }\r\n\r\n    if (avatar.size > 20 * 1024 * 1024) {\r\n      reject(new Error(\"Invalid size\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const currentUser = auth.currentUser;\r\n\r\n    if (!currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const uid = currentUser.uid;\r\n\r\n    if (!uid) {\r\n      reject(new Error(\"No UID\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const avatarReference = storage\r\n      .ref()\r\n      .child(\"images\")\r\n      .child(\"avatars\")\r\n      .child(uid);\r\n\r\n    avatarReference\r\n      .put(avatar)\r\n      .then((uploadTaskSnapshot) => {\r\n        avatarReference\r\n          .getDownloadURL()\r\n          .then((value) => {\r\n            currentUser\r\n              .updateProfile({\r\n                photoURL: value,\r\n              })\r\n              .then((value) => {\r\n                analytics.logEvent(\"change_avatar\");\r\n\r\n                resolve(value);\r\n              })\r\n              .catch((reason) => {\r\n                reject(reason);\r\n              });\r\n          })\r\n          .catch((reason) => {\r\n            reject(reason);\r\n          });\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.removeAvatar = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const currentUser = auth.currentUser;\r\n\r\n    if (!currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const uid = currentUser.uid;\r\n\r\n    if (!uid) {\r\n      reject(new Error(\"No UID\"));\r\n\r\n      return;\r\n    }\r\n\r\n    currentUser\r\n      .updateProfile({\r\n        photoURL: null,\r\n      })\r\n      .then((value) => {\r\n        const avatarReference = storage\r\n          .ref()\r\n          .child(\"images\")\r\n          .child(\"avatars\")\r\n          .child(uid);\r\n\r\n        avatarReference\r\n          .delete()\r\n          .then((value) => {\r\n            analytics.logEvent(\"remove_avatar\");\r\n\r\n            resolve(value);\r\n          })\r\n          .catch((reason) => {\r\n            reject(reason);\r\n          });\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.changeFirstName = (firstName) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!firstName) {\r\n      reject(new Error(\"No first name\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const currentUser = auth.currentUser;\r\n\r\n    if (!currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const uid = currentUser.uid;\r\n\r\n    if (!uid) {\r\n      reject(new Error(\"No UID\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const userDocumentReference = firestore.collection(\"users\").doc(uid);\r\n\r\n    userDocumentReference\r\n      .update({\r\n        firstName: firstName,\r\n      })\r\n      .then((value) => {\r\n        analytics.logEvent(\"change_first_name\");\r\n\r\n        resolve(value);\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.changeLastName = (lastName) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!lastName) {\r\n      reject(new Error(\"No last name\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const currentUser = auth.currentUser;\r\n\r\n    if (!currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const uid = currentUser.uid;\r\n\r\n    if (!uid) {\r\n      reject(new Error(\"No UID\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const userDocumentReference = firestore.collection(\"users\").doc(uid);\r\n\r\n    userDocumentReference\r\n      .update({\r\n        lastName: lastName,\r\n      })\r\n      .then((value) => {\r\n        analytics.logEvent(\"change_last_name\");\r\n\r\n        resolve(value);\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.changeUsername = (username) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!username) {\r\n      reject(new Error(\"No username\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const currentUser = auth.currentUser;\r\n\r\n    if (!currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const uid = currentUser.uid;\r\n\r\n    if (!uid) {\r\n      reject(new Error(\"No UID\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const userDocumentReference = firestore.collection(\"users\").doc(uid);\r\n\r\n    userDocumentReference\r\n      .update({\r\n        username: username,\r\n      })\r\n      .then((value) => {\r\n        analytics.logEvent(\"change_username\");\r\n\r\n        resolve(value);\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.changeEmailAddress = (emailAddress) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!emailAddress) {\r\n      reject(new Error(\"No e-mail address\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const currentUser = auth.currentUser;\r\n\r\n    if (!currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const uid = currentUser.uid;\r\n\r\n    if (!uid) {\r\n      reject(new Error(\"No UID\"));\r\n\r\n      return;\r\n    }\r\n\r\n    currentUser\r\n      .updateEmail(emailAddress)\r\n      .then((value) => {\r\n        analytics.logEvent(\"change_email_address\");\r\n\r\n        resolve(value);\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.changePassword = (password) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!password) {\r\n      reject(new Error(\"No password\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const currentUser = auth.currentUser;\r\n\r\n    if (!currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    const uid = currentUser.uid;\r\n\r\n    if (!uid) {\r\n      reject(new Error(\"No UID\"));\r\n\r\n      return;\r\n    }\r\n\r\n    currentUser\r\n      .updatePassword(password)\r\n      .then((value) => {\r\n        const userDocumentReference = firestore.collection(\"users\").doc(uid);\r\n\r\n        userDocumentReference\r\n          .update({\r\n            lastPasswordChange: firebase.firestore.FieldValue.serverTimestamp(),\r\n          })\r\n          .then((value) => {\r\n            analytics.logEvent(\"change_password\");\r\n\r\n            resolve(value);\r\n          })\r\n          .catch((reason) => {\r\n            reject(reason);\r\n          });\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.verifyEmailAddress = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const currentUser = auth.currentUser;\r\n\r\n    if (!currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    currentUser\r\n      .sendEmailVerification()\r\n      .then((value) => {\r\n        analytics.logEvent(\"verify_email_address\");\r\n\r\n        resolve(value);\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.deleteAccount = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const currentUser = auth.currentUser;\r\n\r\n    if (!currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    currentUser\r\n      .delete()\r\n      .then((value) => {\r\n        analytics.logEvent(\"delete_account\");\r\n\r\n        resolve(value);\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.getRoles = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const currentUser = auth.currentUser;\r\n\r\n    if (!currentUser) {\r\n      reject(new Error(\"No current user\"));\r\n\r\n      return;\r\n    }\r\n\r\n    currentUser\r\n      .getIdTokenResult()\r\n      .then((idTokenResult) => {\r\n        resolve(idTokenResult.claims.roles);\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.isAdmin = () => {\r\n  return new Promise((resolve, reject) => {\r\n    authentication\r\n      .getRoles()\r\n      .then((value) => {\r\n        resolve(value.includes(\"admin\"));\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.isPremium = () => {\r\n  return new Promise((resolve, reject) => {\r\n    authentication\r\n      .getRoles()\r\n      .then((value) => {\r\n        resolve(value.includes(\"premium\"));\r\n      })\r\n      .catch((reason) => {\r\n        reject(reason);\r\n      });\r\n  });\r\n};\r\n\r\nauthentication.getName = (fields) => {\r\n  if (!fields) {\r\n    return null;\r\n  }\r\n\r\n  const firstName = fields.firstName;\r\n  const username = fields.username;\r\n  const displayName = fields.displayName;\r\n  const lastName = fields.lastName;\r\n\r\n  if (firstName) {\r\n    return firstName;\r\n  }\r\n\r\n  if (username) {\r\n    return username;\r\n  }\r\n\r\n  if (displayName) {\r\n    return displayName;\r\n  }\r\n\r\n  if (lastName) {\r\n    return lastName;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nauthentication.getFullName = (fields) => {\r\n  if (!fields) {\r\n    return null;\r\n  }\r\n\r\n  const firstName = fields.firstName;\r\n  const lastName = fields.lastName;\r\n  const displayName = fields.displayName;\r\n\r\n  if (firstName && lastName) {\r\n    return `${firstName} ${lastName}`;\r\n  }\r\n\r\n  if (displayName) {\r\n    return displayName;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nauthentication.getNameInitials = (fields) => {\r\n  if (!fields) {\r\n    return null;\r\n  }\r\n\r\n  const firstName = fields.firstName;\r\n  const lastName = fields.lastName;\r\n  const username = fields.username;\r\n  const displayName = fields.displayName;\r\n\r\n  if (firstName && lastName) {\r\n    return firstName.charAt(0) + lastName.charAt(0);\r\n  }\r\n\r\n  if (firstName) {\r\n    return firstName.charAt(0);\r\n  }\r\n\r\n  if (username) {\r\n    return username.charAt(0);\r\n  }\r\n\r\n  if (lastName) {\r\n    return lastName.charAt(0);\r\n  }\r\n\r\n  if (displayName) {\r\n    return displayName.charAt(0);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nauthentication.getProfileCompletion = (fields) => {\r\n  if (!fields) {\r\n    return null;\r\n  }\r\n\r\n  fields = [\r\n    fields.photoURL,\r\n    fields.firstName,\r\n    fields.lastName,\r\n    fields.username,\r\n    fields.email,\r\n    fields.email && fields.emailVerified,\r\n  ];\r\n\r\n  if (!fields) {\r\n    return null;\r\n  }\r\n\r\n  let profileCompletion = 0;\r\n\r\n  fields.forEach((field) => {\r\n    if (field) {\r\n      profileCompletion += 100 / fields.length;\r\n    }\r\n  });\r\n\r\n  return Math.floor(profileCompletion);\r\n};\r\n\r\nauthentication.getSecurityRating = (user, userData) => {\r\n  if (!user || !user.metadata) {\r\n    return null;\r\n  }\r\n\r\n  let creationTime = user.metadata.creationTime;\r\n\r\n  if (!creationTime) {\r\n    return null;\r\n  }\r\n\r\n  creationTime = moment(creationTime);\r\n\r\n  let securityRating = 0;\r\n\r\n  if (userData && userData.lastPasswordChange) {\r\n    let lastPasswordChange = userData.lastPasswordChange;\r\n\r\n    if (lastPasswordChange) {\r\n      lastPasswordChange = moment(lastPasswordChange.toDate());\r\n\r\n      if (creationTime.diff(lastPasswordChange, \"days\") >= 365.242199) {\r\n        securityRating = 50;\r\n      } else {\r\n        securityRating = 100;\r\n      }\r\n    }\r\n  } else {\r\n    if (moment().diff(creationTime, \"days\") >= 365.242199) {\r\n      securityRating = 50;\r\n    } else {\r\n      securityRating = 100;\r\n    }\r\n  }\r\n\r\n  return securityRating;\r\n};\r\n\r\nexport default authentication;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/my-app/src/services/authentication.js b/my-app/src/services/authentication.js
--- a/my-app/src/services/authentication.js	(revision 5d0c9b5b2468212d2456460ccef42b69d2d9bdcf)
+++ b/my-app/src/services/authentication.js	(date 1624235927901)
@@ -1060,4 +1060,8 @@
   return securityRating;
 };
 
+authentication.getType = (user, userData) => {
+
+}
+
 export default authentication;
Index: my-app/src/components/Matching/Matching.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useEffect, useState } from 'react';\r\nimport Loader from '../Loader';\r\nimport PartnerCard from './PartnerCard';\r\nimport './style.css';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst Matching = ({type}) => {\r\n\r\n    const [isLoading, setLoadingState] = useState(true);\r\n    const [partners, setPartners] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // 타입 맞는 상대 불러오기: API. type 프로퍼티 활용\r\n        const res = [\r\n            {'username': '상대1', 'type': 'A'},\r\n            {'username': '상대2', 'type': 'B'},\r\n            {'username': '상대3', 'type': 'A'},\r\n        ]\r\n        setTimeout(() => {\r\n            setPartners([...res]);\r\n            setLoadingState(false);\r\n        }, 3000);\r\n    }, []);\r\n\r\n    if (isLoading) return <div>\r\n            <Loader message=\"운명의 상대를 찾는 중..\" />\r\n        </div>\r\n\r\n    if (!partners.length) {\r\n        return <h1>맞는 상대가 없습니다.</h1>\r\n    } \r\n\r\n    return <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" id=\"matching\">\r\n        {partners.map(partner => <PartnerCard {...partner} />)}\r\n    </Grid>\r\n}\r\n\r\nexport default Matching;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/my-app/src/components/Matching/Matching.js b/my-app/src/components/Matching/Matching.js
--- a/my-app/src/components/Matching/Matching.js	(revision 5d0c9b5b2468212d2456460ccef42b69d2d9bdcf)
+++ b/my-app/src/components/Matching/Matching.js	(date 1624240724668)
@@ -3,14 +3,41 @@
 import PartnerCard from './PartnerCard';
 import './style.css';
 import { Grid } from '@material-ui/core';
+import firebase from 'firebase/app';
+import 'firebase/firestore';
+import 'firebase/auth';
+import 'firebase/storage';
+import 'firebase/database';
+
+
+
 
 const Matching = ({type}) => {
+    const user = firebase.auth().currentUser;
+    var uid;
+    var myType;
+    if (user != null) {
+        uid = user.uid
+    }
+    const myTypeSpace = firebase.database().ref(`accounts/${uid}/type/`)
+
 
     const [isLoading, setLoadingState] = useState(true);
     const [partners, setPartners] = useState([]);
 
     useEffect(() => {
         // 타입 맞는 상대 불러오기: API. type 프로퍼티 활용
+        myTypeSpace.on('value', function(snapshot){
+            myType = snapshot.val();
+            const myPartnerList = firebase.database().ref(`partnerList/${myType}/`)
+            myPartnerList.on('value', function(partner){
+                const nameOfPartner = Object.keys(partner.val());
+
+
+            })
+        })
+        console.log(myType);
+
         const res = [
             {'username': '상대1', 'type': 'A'},
             {'username': '상대2', 'type': 'B'},
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"f204b82d-829e-4ee4-8cb5-306e6077eff9\" name=\"Default Changelist\" comment=\"Try to Edit the Homepage\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/my-app/src/components/Matching/Matching.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/my-app/src/components/Matching/Matching.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/my-app/src/components/Test/Questions.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/my-app/src/components/Test/Questions.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/my-app/src/components/Test/Result.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/my-app/src/components/Test/Result.js\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"JavaScript File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1u2V2UP51ZxIkwv9M6TWuXKBq14\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"dart.analysis.tool.window.visible\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\r\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.sourceCode.JavaScript\" />\r\n    <property name=\"vue.rearranger.settings.migration\" value=\"true\" />\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration />\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"f204b82d-829e-4ee4-8cb5-306e6077eff9\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1623863474684</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1623863474684</updated>\r\n      <workItem from=\"1623863482218\" duration=\"9324000\" />\r\n      <workItem from=\"1623881385276\" duration=\"1271000\" />\r\n      <workItem from=\"1623909728007\" duration=\"904000\" />\r\n      <workItem from=\"1623915790887\" duration=\"648000\" />\r\n      <workItem from=\"1623944489695\" duration=\"723000\" />\r\n      <workItem from=\"1623952052783\" duration=\"5490000\" />\r\n      <workItem from=\"1623992662715\" duration=\"9326000\" />\r\n      <workItem from=\"1624025391261\" duration=\"13328000\" />\r\n      <workItem from=\"1624164392167\" duration=\"38874000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Update Firebase ID in .env\">\r\n      <created>1623864913912</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623864913912</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Try to Edit the Homepage\">\r\n      <created>1623992726912</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623992726912</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Try to Edit the Homepage\">\r\n      <created>1623992763985</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623992763985</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Update Firebase ID in .env\" />\r\n    <MESSAGE value=\"Try to Edit the Homepage\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Try to Edit the Homepage\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"javascript\">\r\n          <url>file://$PROJECT_DIR$/my-app/src/components/AccountTab/AccountTab.js</url>\r\n          <line>691</line>\r\n          <option name=\"timeStamp\" value=\"6\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"javascript\">\r\n          <url>file://$PROJECT_DIR$/my-app/src/components/Bar/Bar.js</url>\r\n          <line>51</line>\r\n          <option name=\"timeStamp\" value=\"9\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"javascript\">\r\n          <url>file://$PROJECT_DIR$/my-app/src/components/Router/Router.js</url>\r\n          <option name=\"timeStamp\" value=\"16\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5d0c9b5b2468212d2456460ccef42b69d2d9bdcf)
+++ b/.idea/workspace.xml	(date 1624240501100)
@@ -4,8 +4,7 @@
     <list default="true" id="f204b82d-829e-4ee4-8cb5-306e6077eff9" name="Default Changelist" comment="Try to Edit the Homepage">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/my-app/src/components/Matching/Matching.js" beforeDir="false" afterPath="$PROJECT_DIR$/my-app/src/components/Matching/Matching.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/my-app/src/components/Test/Questions.js" beforeDir="false" afterPath="$PROJECT_DIR$/my-app/src/components/Test/Questions.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/my-app/src/components/Test/Result.js" beforeDir="false" afterPath="$PROJECT_DIR$/my-app/src/components/Test/Result.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/my-app/src/services/authentication.js" beforeDir="false" afterPath="$PROJECT_DIR$/my-app/src/services/authentication.js" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -71,7 +70,7 @@
       <workItem from="1623952052783" duration="5490000" />
       <workItem from="1623992662715" duration="9326000" />
       <workItem from="1624025391261" duration="13328000" />
-      <workItem from="1624164392167" duration="38874000" />
+      <workItem from="1624164392167" duration="44311000" />
     </task>
     <task id="LOCAL-00001" summary="Update Firebase ID in .env">
       <created>1623864913912</created>
